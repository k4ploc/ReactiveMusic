plugins {
	id 'java'
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}


loom {
  runs {
    client {
      vmArgs "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
    }
  }
}


version = project.mod_version + "+" + project.minecraft_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	//maven { url 'https://jitpack.io' }




	//maven { url 'https://maven.wispforest.io/releases/' }

	//maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }

	maven {
		name 'Xander Maven'
		url 'https://maven.isxander.dev/releases'
	}


}


dependencies {


	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"


	//implementation 'org.yaml:snakeyaml:2.2'
	//include("org.yaml:snakeyaml:2.2")



	modApi "com.terraformersmc:modmenu:${project.modmenu_version}"

	//modApi "me.shedaniel.cloth:cloth-config-fabric:${project.clothconfig_version}"

	modImplementation("dev.isxander:yet-another-config-lib:${project.yacl_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}




}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version

		//replace "supportedMCVersion": minecraft_version

	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
	toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// Ensure Loomâ€™s remapped outputs get published
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version

            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(remapSourcesJar) {
                builtBy remapSourcesJar
            }

            pom {
                name = project.archivesBaseName
                description = 'Mocha (re)Mix of Reactive Music!'
                url = 'https://github.com/rocamocha/ReactiveMusic'

                licenses {
                    license {
                        name = 'GPLv3'
                        url = 'https://opensource.org/license/gpl-3-0'
                    }
                }
                developers {
                    developer {
                        id = 'rocamocha'
                        name = 'Jeric Rocamora'
                    }
                }
                scm {
                    url = 'https://github.com/rocamocha/ReactiveMusic'
                    connection = 'scm:git:https://github.com/rocamocha/ReactiveMusic.git'
                    developerConnection = 'scm:git:ssh://git@github.com/rocamocha/ReactiveMusic.git'
                }
            }
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"   // can be anything
            url = uri("https://maven.pkg.github.com/rocamocha/ReactiveMusic")
            credentials {
                username = System.getenv("GITHUB_ACTOR") ?: project.findProperty("gpr.user")
                password = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.key")
            }
        }
    }
}

